# -*- coding: utf-8 -*-
"""「Final-OLED文字轉換」

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18YdAhWgL03KbKfK2pt3Bj9b_tG4Nw3-j

## Load Font and Required Libraries
Download the Taipei Sans TC Beta font and rename it to TaipeiSansTCBeta-Regular.ttf. Also, import the necessary libraries from PIL and Google Colab.
"""

# 下載台北思源黑體並命名taipei_sans_tc_beta.ttf
!wget -O TaipeiSansTCBeta-Regular.ttf https://drive.google.com/uc?id=1eGAsTN1HBpJAkeVM57_C7ccp7hbgSz3_&export=download
font_path = "/content/TaipeiSansTCBeta-Regular.ttf"

from PIL import Image, ImageDraw, ImageFont
from google.colab import files

"""## Draw Character Grid

Define a function to draw a grid for a single character. This function takes the character, font path, image size, and grid size as arguments, and returns an image of the character in a grid.
"""

def draw_character_grid(char, font_path, image_size, grid_size):
    # Load the font file using the provided font path and size (grid_size * 16)
    font = ImageFont.truetype(font_path, grid_size * 16)

    # Create a new image with a white background (255 represents white in L mode)
    # L mode means each pixel is a single 8-bit gray level
    image = Image.new('L', image_size, 255)
    draw = ImageDraw.Draw(image)

    # Get the bounding box of the character to calculate its width and height
    bbox = draw.textbbox((0, 0), char, font=font)
    char_width, char_height = bbox[2], bbox[3]

    # Calculate the position to center the character within the image
    x = (image_size[0] - char_width) // 2
    y = (image_size[1] - char_height) // 2 - 8  # Adjusting y-position by 8 pixels

    # Draw the character on the image using the calculated position
    draw.text((x, y), char, font=font, fill=0)  # 0 represents black in L mode

    # Draw the grid lines on the image
    for row in range(0, image_size[0], grid_size):
        draw.line([(row, 0), (row, image_size[1])], fill=128)  # 128 represents gray in L mode
    for column in range(0, image_size[1], grid_size):
        draw.line([(0, column), (image_size[0], column)], fill=128)  # 128 represents gray in L mode

    return image  # Return the generated image

# Usage:
char = '龍'  # Character to be displayed
image_size = (256, 256)  # Size of the image
grid_size = 16  # Size of each grid cell
image = draw_character_grid(char, font_path, image_size, grid_size)  # Call the function
display(image)  # Display the image using the IPython's display function in Colab

"""## Display Pattern
Define a function to display the pattern of a character. This function takes the bitmap data of a character as an argument and prints the pattern to the console.
"""

def display_pattern(bitmap):
    for i in range(0, len(bitmap), 2):  # Assuming 16x16 bitmap, 2 bytes per row
        row = ''
        for j in range(2):  # Two bytes per row
            byte = bitmap[i+j]
            for k in range(8):  # Eight bits per byte
                bit = (byte >> (7 - k)) & 1
                row += str(bit)+" " if bit else '  '  # Replace 0 with space
        print(row)

char = [0, 0, 17, 252, 16, 12, 32, 8, 126, 16, 50, 32, 50, 32, 37, 254,
    100, 32, 116, 32, 92, 32, 12, 32, 22, 32, 50, 32, 65, 224, 0, 0]
display_pattern(char)

"""## Generate Font Data
Define a function to generate font data for a set of characters. This function takes the characters, font path, and size as arguments, and returns a dictionary containing the bitmap data for each character.
"""

def generate_font_data(characters, font_path, size):
    font = ImageFont.truetype(font_path, size)
    font_data = {}

    for char in characters:
        image = Image.new('1', (16, 16), 0)  # 1-bit image, 16x16 pixels
        draw = ImageDraw.Draw(image)
        draw.text((0, 0), char, font=font, fill=1)
        # Convert bitmap data to list of bytes
        bitmap = list(image.getdata())

        byte_data = []
        for byte_pos in range(0, len(bitmap), 8):  # Process 8 bits (1 byte) at a time
            byte_value = 0
            for bit_no in range(8):  # Loop through each bit in the byte
                bit = bitmap[byte_pos + bit_no]
                if bit:
                    byte_value |= 1 << (7 - bit_no)  # Set the corresponding bit in byte_value
            byte_data.append(byte_value)

        font_data[char] = byte_data
    return font_data

# Example usage:
characters = '↑□紅黃綠✓'
font_data = generate_font_data(characters, font_path, 16)

for font, bitmap in font_data.items():
   print(f"{font} {bitmap}")
   display_pattern(bitmap)
   print("-"*250)

"""## Write to Font File
Write the generated font data to a file named characters.py, and read it back to verify the contents.
"""

characters = '↑□紅黃綠✓'
font_data = generate_font_data(characters, font_path, 16)

filename = "Final_characters.py"
# write to characters.py
with open(filename, "w") as file:
    file.write("CHARACTER_DATA = {\n")
    for char, bitmap in font_data.items():
        file.write(f'    "{char}": {bitmap},\n')
    file.write("}\n")

# Open and read the file
with open(filename, "r", encoding='utf-8') as file:
    file_contents = file.read()
# Output the file contents
print(file_contents)
